[
  '{{repeat(20, 20)}}',
  {
    userId : '{{random("630babae63fbfa32e3dfcc1e", "630babae63fbfa32e3dfcc1f", "630babae63fbfa32e3dfcc20", "630babae63fbfa32e3dfcc21", "630babae63fbfa32e3dfcc22", "630babae63fbfa32e3dfcc23", "630babae63fbfa32e3dfcc24", "630babae63fbfa32e3dfcc25", "630babae63fbfa32e3dfcc26", "630babae63fbfa32e3dfcc27", "630babae63fbfa32e3dfcc28", "630babae63fbfa32e3dfcc29", "630babae63fbfa32e3dfcc2a", "630babae63fbfa32e3dfcc2b", "630babae63fbfa32e3dfcc2c", "630babae63fbfa32e3dfcc2d", "630babae63fbfa32e3dfcc2e", "630babae63fbfa32e3dfcc2f", "630babae63fbfa32e3dfcc30", "630babae63fbfa32e3dfcc31", "630babae63fbfa32e3dfcc32", "630babae63fbfa32e3dfcc33", "630babae63fbfa32e3dfcc34", "630babae63fbfa32e3dfcc35", "630babae63fbfa32e3dfcc36", "630babae63fbfa32e3dfcc37", "630babae63fbfa32e3dfcc38", "630babae63fbfa32e3dfcc39", "630babae63fbfa32e3dfcc3a", "630babae63fbfa32e3dfcc3b", "630babae63fbfa32e3dfcc3c", "630babae63fbfa32e3dfcc3d", "630babae63fbfa32e3dfcc3e", "630babae63fbfa32e3dfcc3f", "630babae63fbfa32e3dfcc40", "630babae63fbfa32e3dfcc41", "630babae63fbfa32e3dfcc42", "630babae63fbfa32e3dfcc43", "630babae63fbfa32e3dfcc44", "630babae63fbfa32e3dfcc45", "630babae63fbfa32e3dfcc46", "630babae63fbfa32e3dfcc47", "630babae63fbfa32e3dfcc48", "630babae63fbfa32e3dfcc49", "630babae63fbfa32e3dfcc4a", "630babae63fbfa32e3dfcc4b", "630babae63fbfa32e3dfcc4c", "630babae63fbfa32e3dfcc4d", "630babae63fbfa32e3dfcc4e", "630babae63fbfa32e3dfcc4f")}}',
    criterions: [
      '{{repeat(0, 6)}}',
      '{{lorem(1, "words")}}'
    ],
    startTime: '{{date(new Date(), new Date(2022, 7, 29), "YYYY-MM-ddTHH:mm:ss")}}',
    endTime: '{{date(new Date(), new Date(2022, 7, 29), "YYYY-MM-ddTHH:mm:ss")}}',
    note: '{{lorem(10, "words")}}',
    status: '{{random("UNKNOWN", "EXPIRED", "ACTIVE", "INACTIVE")}}',
    vehicleId: 0,
    route: {
    	country_crossed	: '{{bool()}}',
		weight_name	: 'auto',
     	weight	: '{{floating(100, 1000, 4)}}',
		duration	:	'{{floating(100, 1000, 4)}}',
		distance	:	'{{floating(100, 1000, 4)}}',
      geometry: '{{lorem(10, "words")}}',
      legs: [
        {

          via_waypoints: [],
          admin: [
            {iso_3166_1 : '{{lorem(1, "words")}}'}
          ],
          weight : '{{floating(1000, 2000, 4)}}',
          duration: '{{floating(1000, 2000, 4)}}',
          distance: '{{floating(1000, 2000, 4)}}',
          summary: '{{lorem(1, "words")}}, {{lorem(1, "words")}}',
          steps: [
            '{{repeat(10, 20)}}',
            {
              intersections: [
                '{{repeat(5, 10)}}',
                {
              		classes: ['motorway'],
              	    entry: [
                	    '{{repeat(1, 2)}}',
                	    '{{bool()}}'
              	],
                    "in": 1,
              	    bearings: [
                        '{{floating(100, 300, 4)}}',
                        '{{floating(100, 300, 4)}}'
                ],
                "duration": '{{floating(1, 5, 4)}}',
                            "mapbox_streets_v8": {
                                "class": "motorway"
                 },
                "is_urban": false,
               	"admin_index": 0,
                "out": 0,
                "weight": '{{floating(100, 200, 4)}}',
                "geometry_index": '{{integer()}}',
                "location": [
                              '{{floating(-180, 180, 4)}}',
                              '{{floating(-90, 90, 4)}}'
                            ]
            	}
              ],
              name:	'{{lorem(5, "words")}}',
              duration: '{{floating(100, 100, 4)}}',
			distance:	'{{floating(100, 100, 4)}}',
			driving_side	:	'right',
			weight	:	'{{floating(100, 100, 4)}}',
			mode	:	'driving',
            ref	: '{{lorem(5, "words")}}',
              geometry	: '{{lorem(5, "words")}}',
              maneuver: {
				type	:	'depart',
                instruction	:	'{{lorem(10, "words")}}',
                bearing_after	:	'{{integer(0, 10)}}',
				bearing_before	:	'{{integer(0, 10)}}',
                location: function() {
                  var bottomLeft = [19.2980900108018, 104.07780042957636];
                  var upperRight = [21.375969540368143, 105.88976393684422];
                  var lng =  Math.random() * (upperRight[1] - bottomLeft[1]) + bottomLeft[1];
                  var lat =  Math.random() * (upperRight[0] - bottomLeft[0]) + bottomLeft[0];
                  var point = [
                  	lng,
                    lat
                  ];
                  return point;
                }
            }
            }
        ]
        }
    ]
  },
    path: {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        coordinates: []
        },
      properties: {
        id: '{{guid()}}',
        startPointTitle: '{{lorem(1, "words")}}',
        endPointTitle: '{{lorem(1, "words")}}',
        distance: '{{floating(1, 100, 4)}}'
      }
    }
  }
]


function query(data) {
    let result = [];
    const userIds = ["6325325b0cfa2ac9e28a7c39", "6325325b0cfa2ac9e28a7c3c", "6325325b0cfa2ac9e28a7c41",
        "6325325b0cfa2ac9e28a7c44", "6325325b0cfa2ac9e28a7c49", "6325325b0cfa2ac9e28a7c4c",
        "6325325b0cfa2ac9e28a7c53", "6325325b0cfa2ac9e28a7c54", "6325325b0cfa2ac9e28a7c56",
        "6325325b0cfa2ac9e28a7c58", "6325325b0cfa2ac9e28a7c5c", "6325325b0cfa2ac9e28a7c5e",
        "6325325b0cfa2ac9e28a7c5f", "6325325b0cfa2ac9e28a7c63", "632541c30cfa2ac9e28a7c6f",
        "632541c30cfa2ac9e28a7c72", "632541c30cfa2ac9e28a7c74", "632542010cfa2ac9e28a7c75",
        "632542010cfa2ac9e28a7c76", "632542010cfa2ac9e28a7c79", "6325511a0cfa2ac9e28a7c83",
        "6325511a0cfa2ac9e28a7c84", "6325511a0cfa2ac9e28a7c87", "6325511a0cfa2ac9e28a7c83",
        "6325511a0cfa2ac9e28a7c84", "6325511a0cfa2ac9e28a7c87"
    ];
    data.forEach(route => {
        let index = data.indexOf(route);
        let coordinates = [];
        let startPointTitle;
        let endPointTitle;
        let distance;

        let leg = route.legs[0];

        leg.steps.forEach(
            step => {
                step.intersections
                    .forEach(
                        inter => {
                            coordinates
                                .push(
                                    inter
                                    .location
                                );
                        });
            });
        let summary = leg
            .summary.split(",");
        startPointTitle =
            summary[0];

        endPointTitle = summary[
            1];
        distance = leg.distance;

        let path = {
            type: "Feature",
            geometry: {
                type: "LineString",
                coordinates: coordinates
            },
            properties: {
                startPointTitle: startPointTitle,
                endPointTitle: endPointTitle,
                distance: distance
            }
        };

        let ride = {
            userId: userIds[index],
            startTime: new Date(),
            endTime: new Date(),
            vehicleId: 0,
            route: route,
            criterions: ["Không hút thuốc", "Không thú cưng"],
            path: path,
            note: "Đón bạn tại điểm A, hoặc điểm B",
            status: "PENDING",
            createdDate: new Date(),
            lastModifiedDate: new Date()
        };

        result.push(ride);
    });
    return result;
}